"""
Django settings for DJANGO_PROJECT project.
Generated by 'django-admin startproject' using Django 5.1.7.
"""

import os
from pathlib import Path
import dj_database_url
import cloudinary # The core Cloudinary library
from dotenv import load_dotenv

# --- Path Setup ---
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Load .env for Local Development (before accessing sensitive os.environ lookups) ---
env_path = BASE_DIR / '.env'
if env_path.exists():
    load_dotenv(dotenv_path=env_path)
    print("INFO: .env file loaded successfully for local development.")
elif not os.environ.get('RENDER', ''): # Only print warning if not on Render and .env is missing
    print(f"WARNING: .env file not found at {env_path}. Ensure environment variables are set if not in DEBUG mode.")

# --- Core Settings ---
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-fallback-key-for-dev-only-*v3^895-_e&e*^ud#$4^^=#(x_ta+vd0usks3nr0(qwi@2kiu$')

# SECURITY WARNING: don't run with debug turned on in production!
# Robust boolean check for DEBUG from environment variable
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() in ('true', '1', 't')

# --- Allowed Hosts ---
ALLOWED_HOSTS = []
if DEBUG:
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])
else:
    # Production hosts: Your custom domain and Render's domain
    # Example: DJANGO_ALLOWED_HOSTS="yourdomain.com,www.yourdomain.com" (comma-separated)
    env_hosts = os.environ.get('DJANGO_ALLOWED_HOSTS', '')
    if env_hosts:
        ALLOWED_HOSTS.extend([host.strip() for host in env_hosts.split(',')])

    # Add Render's external hostname if provided
    RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
    if RENDER_EXTERNAL_HOSTNAME:
        if RENDER_EXTERNAL_HOSTNAME not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

if not ALLOWED_HOSTS and not DEBUG: # Fallback if no hosts are set in production
    print("WARNING: DJANGO_ALLOWED_HOSTS is not set in production. Service might not be reachable.")
    # ALLOWED_HOSTS.append('.onrender.com') # Or a more specific Render hostname if known

print(f"INFO: DEBUG = {DEBUG}")
print(f"INFO: ALLOWED_HOSTS = {ALLOWED_HOSTS}")

# --- Application definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',   # Must be before cloudinary_storage IF also serving static files via Cloudinary
    'django.contrib.sites',

    'blog.apps.BlogConfig',         # Your app
    'users.apps.UsersConfig',       # Your app

    'crispy_forms',
    'crispy_bootstrap5',
    'django_summernote',

    'cloudinary_storage',           # For Cloudinary media file storage
    'cloudinary',                   # Core Cloudinary SDK
    # 'storages',                   # Add only if using S3 fallback (see storage config)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # WhiteNoise for serving static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'users.middleware.DynamicSiteMiddleware', # Your custom middleware
]

ROOT_URLCONF = 'DJANGO_PROJECT.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Project-level templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'blog.context_processors.popular_tags',
                'blog.context_processors.search_form_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'DJANGO_PROJECT.wsgi.application'


# --- Database Configuration ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
default_db_url = f"sqlite:///{BASE_DIR / 'db.sqlite3'}"
DATABASES = {
    'default': dj_database_url.config(
        default=default_db_url,
        conn_max_age=600,
        conn_health_checks=True,
        # SSL is typically required for production PostgreSQL databases
        # On Render, DATABASE_URL usually includes sslmode=require if needed.
        # If not, set ssl_require=True if not DEBUG.
        ssl_require=(not DEBUG and os.environ.get('DATABASE_URL', '').startswith('postgres'))
    )
}
print(f"INFO: Database Engine = {DATABASES['default']['ENGINE']}")


# --- Password validation ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# --- Internationalization ---
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# --- Cloudinary Configuration ---
# django-cloudinary-storage will automatically pick up CLOUDINARY_URL from env variables.
# Or, it will use CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET if set.
# This CLOUDINARY_STORAGE dict is for additional options.
CLOUDINARY_STORAGE = {
    'SECURE': True,  # Always serve images over HTTPS
    'PREFIX': 'media', # Optional: All media files will be uploaded to a 'media/' folder in Cloudinary
    # 'TAGS': ['my_blog_app_uploads'], # Optional: Default tags for all uploads
    # 'RESOURCE_TYPE': 'auto', # Or 'image', 'video', 'raw'
}

# --- Storage Settings (Django 4.2+) ---
# https://docs.djangoproject.com/en/dev/ref/settings/#storages
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage" # Default for DEBUG
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage" # Good for Render

if not DEBUG:
    print("INFO: Production mode (DEBUG=False). Configuring cloud storage for media files.")
    cloudinary_url_env = os.environ.get("CLOUDINARY_URL")
    cloudinary_name_env = os.environ.get("CLOUDINARY_CLOUD_NAME")

    if cloudinary_url_env or (cloudinary_name_env and os.environ.get("CLOUDINARY_API_KEY")):
        # If CLOUDINARY_URL is set, it takes precedence and django-cloudinary-storage uses it
        # to configure the cloudinary SDK.
        # If individual CLOUDINARY_CLOUD_NAME, API_KEY, API_SECRET are set, it uses those.
        DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"
        print("INFO: Cloudinary configured as the default media storage.")        # Example check that Cloudinary SDK *could* be configured (actual config happens inside storage backend)
        try:
            # Note: django-cloudinary-storage does the actual config when needed.
            # This is just a proactive check that creds *might* be available to the core SDK.
            if cloudinary_url_env:            # Use cloudinary.config() to configure the SDK
                cloudinary.config(url=cloudinary_url_env)
                print("INFO: Cloudinary SDK configured from CLOUDINARY_URL environment variable.")
            else:
                # Simple config check without using CloudinaryConfig
                cloudinary.config(
                    cloud_name=cloudinary_name_env,
                    api_key=os.environ.get("CLOUDINARY_API_KEY"),
                    api_secret=os.environ.get("CLOUDINARY_API_SECRET")
                )
                print(f"INFO: Cloudinary SDK check indicates configuration is available.")
        except Exception as e:
            print(f"WARNING: Error during preliminary Cloudinary config check: {e}. Uploads may fail.")

    # Optional S3 fallback logic (uncomment and configure if needed)
    # elif 'AWS_ACCESS_KEY_ID' in os.environ:
    #     if 'storages' not in INSTALLED_APPS:
    #         INSTALLED_APPS.append('storages') # Ensure 'storages' (django-storages) is installed
    #     DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    #     AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    #     AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-1')
    #     AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
    #     AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    #     AWS_DEFAULT_ACL = 'public-read' # Or None for private access
    #     # AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY will be picked from env by boto3
    #     print("INFO: AWS S3 configured as the default media storage.")
    else:
        print("WARNING: In PRODUCTION (DEBUG=False), but no Cloudinary (or S3) credentials found in env variables.")
        print("Defaulting to FileSystemStorage for media. THIS IS NOT RECOMMENDED FOR RENDER and can lead to data loss.")

STORAGES = {
    "default": {
        "BACKEND": DEFAULT_FILE_STORAGE,
    },
    "staticfiles": {
        "BACKEND": STATICFILES_STORAGE,
    },
}

# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles_build' / 'static' # For `collectstatic`
STATICFILES_DIRS = [
    BASE_DIR / 'static', # Your project-level static files
]

# --- Media files (User uploaded files) ---
# https://docs.djangoproject.com/en/5.1/topics/files/
MEDIA_URL = '/media/'
# MEDIA_ROOT is where files are stored if using FileSystemStorage.
# For Cloudinary/S3, Django might use it for temporary operations during upload.
MEDIA_ROOT = BASE_DIR / 'media_uploads_temp'


# --- Default primary key field type ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Crispy Forms Configuration ---
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"


# --- Authentication & Authorization ---
LOGIN_URL = 'login'  # Name of the URL pattern for the login page
LOGIN_REDIRECT_URL = 'blog-home' # Name of the URL pattern to redirect after login
LOGOUT_REDIRECT_URL = '/' # URL to redirect to after logout
SESSION_ENGINE = 'django.contrib.sessions.backends.db' # Default, good for most cases


# --- Email Configuration ---
# For production, use environment variables for sensitive email settings
EMAIL_BACKEND = os.environ.get('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.environ.get('DJANGO_EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('DJANGO_EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('DJANGO_EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'amswars5559@gmail.com') # Your email
# IMPORTANT: For Gmail, use an "App Password" if 2FA is enabled. Store it securely.
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD') # Set this in Render's env variables!

DEFAULT_FROM_EMAIL = f"Blog-It <{EMAIL_HOST_USER}>"
SERVER_EMAIL = EMAIL_HOST_USER # For server error notifications
EMAIL_SUBJECT_PREFIX = '[Blog-It] '

if not EMAIL_HOST_PASSWORD and not DEBUG and EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
    print("WARNING: EMAIL_HOST_PASSWORD is not set in a production-like environment. Email sending will likely fail.")


# --- Django Sites Framework ---
SITE_ID = 1 # Required by django.contrib.sites


# --- Site URL (for full URL generation in emails, sitemaps, etc.) ---
if DEBUG:
    SITE_URL = 'http://127.0.0.1:8000'
else:
    # RENDER_EXTERNAL_URL is preferred as it includes https and the correct domain
    # If we have a DJANGO_DOMAIN environment variable, use that as the primary fallback
    SITE_URL = os.environ.get('RENDER_EXTERNAL_URL') or os.environ.get('DJANGO_DOMAIN', '')
    
    # If no explicit domain is set in environment variables, try to use ALLOWED_HOSTS
    if not SITE_URL and ALLOWED_HOSTS:
        # Filter out localhost/127.0.0.1 and pick the first valid hostname
        production_hosts = [host for host in ALLOWED_HOSTS 
                          if host not in ['localhost', '127.0.0.1'] and '.' in host]
        if production_hosts:
            SITE_URL = f"https://{production_hosts[0]}"
    
    # Final fallback if nothing else is available
    if not SITE_URL:
        SITE_URL = 'https://your-app.onrender.com'
        print("WARNING: Using default fallback domain. Set DJANGO_DOMAIN in environment variables.")

print(f"INFO: SITE_URL configured as: {SITE_URL}")


# --- Django Summernote Configuration ---
SUMMERNOTE_CONFIG = {
    'iframe': True,
    'summernote': {
        'width': '100%',
        'height': '480px',
        'toolbar': [
            ['style', ['style']],
            ['font', ['bold', 'underline', 'clear']],
            ['fontname', ['fontname']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['table', ['table']],
            ['insert', ['link', 'picture', 'video']],
            ['view', ['fullscreen', 'codeview', 'help']],
        ],
        'fontNames': ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica', 'Impact', 'Tahoma', 'Times New Roman', 'Verdana'],
    },
    'css': (
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.29.0/theme/monokai.min.css',
        # '/static/css/summernote-custom.css', # Ensure this file exists if uncommented
    ),
    'codemirror': {
        'theme': 'monokai',
        'mode': 'htmlmixed',
        'lineNumbers': True,
        'lineWrapping': True,
    },
}


# --- Production Security Settings ---
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    # Ensure your reverse proxy (like Render's load balancer) correctly sets this header
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # Additional security headers
    SECURE_BROWSER_XSS_FILTER = True # X-XSS-Protection: 1; mode=block (though deprecated by modern browsers, use CSP instead)
    SECURE_CONTENT_TYPE_NOSNIFF = True # X-Content-Type-Options: nosniff
    X_FRAME_OPTIONS = 'DENY' # To prevent clickjacking

    # For Content Security Policy, consider using django-csp or manually setting the header.
    # CSP_DEFAULT_SRC = ("'self'",) # Example CSP
    print("INFO: Production security settings applied (HTTPS, HSTS, etc.).")